package de.adorsys.beanstest;

import javax.enterprise.inject.spi.InjectionPoint;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import org.jboss.weld.injection.spi.JpaInjectionServices;
import org.jboss.weld.injection.spi.ResourceReference;
import org.jboss.weld.injection.spi.ResourceReferenceFactory;

public class MockJpaInjectionServices implements JpaInjectionServices
{

   private EntityManagerFactory entityManagerFactory;
   private EntityManager entityManager;

   @Override
   public void cleanup()
   {
      try
      {
         if (entityManager.getTransaction().isActive())
         {
            entityManager.getTransaction().rollback();
         }
         entityManager.close();
         entityManagerFactory.close();
      }
      catch (Exception x)
      {
      }
   }

   @Override
   public EntityManager resolvePersistenceContext(InjectionPoint injectionPoint)
   {
      init();
      return entityManager;
   }

   @Override
   public EntityManagerFactory resolvePersistenceUnit(InjectionPoint injectionPoint)
   {
      init();
      return entityManagerFactory;
   }

   public void init()
   {
      if (entityManager != null && entityManagerFactory != null)
      {
         return;
      }

      try
      {
         entityManagerFactory = Persistence.createEntityManagerFactory("test");
         entityManager = entityManagerFactory.createEntityManager();
      }
      catch (Exception x)
      {
         throw new IllegalStateException(x);
      }
   }

    @Override
    public ResourceReferenceFactory<EntityManager> registerPersistenceContextInjectionPoint(InjectionPoint arg0) {
        init();
        return new ResourceReferenceFactory<EntityManager>() {

            @Override
            public ResourceReference<EntityManager> createResource() {
                return new ResourceReference<EntityManager>() {

                    @Override
                    public EntityManager getInstance() {
                        return entityManager;
                    }

                    @Override
                    public void release() {
                    }
                };
            }
        };
    }

    @Override
    public ResourceReferenceFactory<EntityManagerFactory> registerPersistenceUnitInjectionPoint(InjectionPoint arg0) {
        init();
        return new ResourceReferenceFactory<EntityManagerFactory>() {
            @Override
            public ResourceReference<EntityManagerFactory> createResource() {
                return new ResourceReference<EntityManagerFactory>() {
                    @Override
                    public EntityManagerFactory getInstance() {
                        return entityManagerFactory;
                    }
                    
                    @Override
                    public void release() {               
                    }
                };
            }
        };
    }
}
